{"version":3,"sources":["interfaces/loadInterfaces/load.js","interfaces/loadInterfaces/loadFromServer.js","interfaces/loadInterfaces/loadFromLocalStorage.js","interfaces/saveInterfaces/save.js","interfaces/saveInterfaces/saveToServer.js","interfaces/saveInterfaces/saveToLocalStorage.js","resources/emptyUserObject.js","components/form.jsx","components/listItem.jsx","components/copyToClipboard.js","components/list.jsx","components/tab.jsx","App.js","serviceWorker.js","index.js"],"names":["userName","setHasGetRun","loadFromWhere","Promise","res","rej","axios","get","then","response","clipboardResponse","data","loadFromServer","JSON","parse","localStorage","getItem","console","log","objectBeingSaved","saveToWhere","userObject","post","saveToServer","userObjectString","stringify","setItem","saveToLocalStorage","username","tabs","tabTitle","clipboard","props","defaultValue","value","placeholder","tabNumber","useState","setValue","onSubmit","e","formHandler","preventDefault","onChange","newClipboardItem","target","type","isItemBeingEdited","setIsItemBeingEdited","clipIdx","deleteItem","updateItem","className","text","onClick","str","el","document","createElement","body","appendChild","select","execCommand","removeChild","copyToClipboard","icon","faCopy","faTrash","faEdit","map","item","key","emptyUserObject","setUserObject","hasGetRun","online","useEffect","loadUserData","saveUserData","addOneItemToClipboard","newItem","changedObject","unshift","updateOneItem","updatedItemTabIdx","updatedItemIdx","updatedItemText","removeOneItemFromClipboard","removedItemTabIdx","removedItemIdx","modifiedClipboard","filter","idx","tab","App","list","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.58876efd.chunk.js","sourcesContent":["import loadFromServer from './loadFromServer.js'\nimport loadFromLocalStorage from './loadFromLocalStorage.js'\nexport default (userName, setHasGetRun, loadFromWhere) => new Promise((res, rej) => {\n  try {\n    switch (loadFromWhere) {\n      case \"server\":\n        loadFromServer(userName)\n          .then(response => {\n            res(response)\n          })\n        break;\n      case \"localStorage\":\n      loadFromLocalStorage();\n      res(JSON.parse(localStorage.getItem('userObject')));\n        break;\n      default:\n        rej('save location not specified correctly')\n    }\n  }\n  catch{\n    console.log({ userName, setHasGetRun, loadFromWhere })\n  }\n})","import axios from 'axios';\n\n// username is for future feature\nexport default (userName) => new Promise((res, rej) => {\n  axios.get(`/clipboard/${userName}`)\n    .then(response => {\n      const clipboardResponse = response.data;\n      res(clipboardResponse)\n    })\n})\n","export default () => {\n  return JSON.parse(localStorage.getItem('userObject'));\n}","// this will be the save interface caller\nimport saveToServer from './saveToServer.js'\nimport saveToLocalStorage from './saveToLocalStorage'\n\nexport default (objectBeingSaved, userName, saveToWhere) => new Promise((res,rej) => {\n    switch(saveToWhere) {\n        case \"server\":\n          saveToServer(objectBeingSaved, userName)\n          .then(response => res(response))\n          break;\n        case \"localStorage\":\n          saveToLocalStorage(objectBeingSaved, userName)\n          res(JSON.parse(localStorage.getItem('userObject')));\n        break;\n        default:\n          rej('save location not specified correctly')\n      }\n})","import axios from 'axios';\n\nexport default (userObject, userName) => new Promise((res, rej) => {\n  axios.post(`/user/update/${userName}`, userObject)\n    .then(response => res(response.data))\n})","export default (userObject, userName) => {\n  let userObjectString = JSON.stringify(userObject, userName);\n  localStorage.setItem('userObject', userObjectString);\n}","export default {\n  username: \"\",\n  data: {\n      tabs: [\n          {\n              tabTitle: '',\n              clipboard: [\n                  \"\"\n              ]\n          }\n      ]\n  }\n}","import React, { useState } from 'react';\nimport './form.scss';\n\nexport default (props) => {\n  let defaultValue = props.value;\n  let placeholder = props.placeholder;\n  let tabNumber = props.tabNumber;\n  const [value, setValue] = useState(defaultValue);\n\n  const handleChange = (e) => {\n    let newClipboardItem = e.target.value;\n    setValue(newClipboardItem);\n  }\n\n  const handleSubmit = (e) => {\n    props.formHandler(value, tabNumber);\n    setValue('');\n    e.preventDefault();\n  }\n\n  return (\n    <form onSubmit={handleSubmit}>\n      <input\n        onChange={handleChange}\n        value={value} type=\"text\"\n        placeholder={placeholder}\n        >\n      </input>\n    </form>\n  )\n}\n","import React, { useState } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faCopy, faTrash, faEdit } from '@fortawesome/free-solid-svg-icons'\nimport copyToClipboard from './copyToClipboard.js'\nimport Form from './form.jsx';\n\nexport default (props) => {\n  let [ isItemBeingEdited, setIsItemBeingEdited ] = useState(false);\n  let tabNumber = props.tabNumber;\n  let clipIdx = props.clipIdx;\n  let deleteItem = props.deleteItem;\n  let updateItem = props.updateItem;\n\n  const middlePerson = (value) => {\n    updateItem(tabNumber, clipIdx, value);\n    setIsItemBeingEdited(!isItemBeingEdited);\n  }\n\n  return (\n    <li className=\"listItems\">\n      <div className=\"listItemText\">{\n        isItemBeingEdited ? <Form value={props.text} formHandler={middlePerson}/> : props.text\n        }</div>\n      <button onClick={() => copyToClipboard(props.text)}>\n        <FontAwesomeIcon icon={faCopy} />\n      </button>\n      <button onClick={() => deleteItem(tabNumber, clipIdx)} >\n        <FontAwesomeIcon icon={faTrash} />\n      </button>\n      <button onClick={() => setIsItemBeingEdited(!isItemBeingEdited)}>\n        <FontAwesomeIcon icon={faEdit} />\n      </button>\n    </li>\n  );\n}\n","export default str => {\n    const el = document.createElement('textarea');\n    el.value = str;\n    document.body.appendChild(el);\n    el.select();\n    document.execCommand('copy');\n    document.body.removeChild(el);\n  };","import React from 'react';\n\nimport ListItem from './listItem.jsx';\nimport './list.scss'\n\nexport default (props) => {\n  let clipboard = props.clipboard;\n  let tabNumber = props.tabNumber;\n  let deleteItem = props.deleteItem;\n  let updateItem = props.updateItem;\n  return (\n    <ul>\n      {clipboard.map((item,clipIdx) => <ListItem key={clipIdx} text={item} clipIdx={clipIdx} tabNumber={tabNumber} deleteItem={deleteItem} updateItem={updateItem}/>)}\n    </ul>\n  );\n}\n","import React, { useState, useEffect } from 'react';\nimport loadUserData from '../interfaces/loadInterfaces/load.js';\nimport saveUserData from '../interfaces/saveInterfaces/save.js';\n\nimport emptyUserObject from '../resources/emptyUserObject.js';\n\nimport List from './list.jsx';\nimport Form from './form.jsx';\nimport './tab.scss'\n\n// username is for future feature, placeholder\nlet userName = '';\n\nexport default (props) => {\n  // emptyUserObject is to make sure tabs is available when component mounts\n  const [userObject, setUserObject] = useState(emptyUserObject);\n  const [hasGetRun, setHasGetRun] = useState(false);\n  const [online, setOnline] = useState(true);\n\n  if(null){setOnline(true)}\n\n  useEffect(() => {\n    if (online) {\n      loadUserData(userName, setHasGetRun, 'server')\n        .then(clipboardResponse => {\n          setUserObject(clipboardResponse);\n          setHasGetRun(true);\n        })\n    }\n    else {\n      loadUserData(userName, setHasGetRun, 'localStorage')\n        .then(clipboardResponse => {\n          setUserObject(clipboardResponse);\n          setHasGetRun(true);\n        })\n    }\n  }, [online])\n\n  useEffect(() => {\n    if (hasGetRun) {\n      saveUserData(userObject, userName, 'localStorage')\n      saveUserData(userObject, userName, 'server')\n    };\n  }, [userObject, hasGetRun])\n\n  // Mapping tabs as a property in the userObject\n  let tabs = userObject.data.tabs;\n\n  let addOneItemToClipboard = (newItem, tabNumber) => {\n    let changedObject = { ...userObject };\n    changedObject.data.tabs[tabNumber].clipboard.unshift(newItem);\n    setUserObject(changedObject);\n  }\n\n  let updateOneItem = (updatedItemTabIdx, updatedItemIdx, updatedItemText) => {\n    let changedObject = { ...userObject };\n    changedObject.data.tabs[updatedItemTabIdx].clipboard[updatedItemIdx] = updatedItemText;\n    setUserObject(changedObject);\n  }\n\n  let removeOneItemFromClipboard = (removedItemTabIdx, removedItemIdx) => {\n    let changedObject = { ...userObject };\n    let modifiedClipboard = changedObject.data.tabs[removedItemTabIdx].clipboard.filter(\n      (item, idx) => idx !== removedItemIdx)\n    changedObject.data.tabs[removedItemTabIdx].clipboard = modifiedClipboard\n    setUserObject(changedObject);\n  }\n  return (\n    <ul>\n      {tabs && tabs.map((tab, idx) => {\n        return (\n          <div key={idx} className=\"tab\">\n            <Form\n              formHandler={addOneItemToClipboard}\n              tabNumber={idx}\n              placeholder={'Enter text'}\n            />\n            <h1>{tab.tabTitle}</h1>\n            <List\n              deleteItem={removeOneItemFromClipboard}\n              updateItem={updateOneItem}\n              clipboard={tab.clipboard}\n              tabNumber={idx}\n            />\n          </div>)\n      })}\n    </ul>\n  );\n}\n","import React from 'react';\nimport './App.css';\nimport Tab from './components/tab.jsx';\n\nfunction App() {\n  let arr = [\"hello\", \"goodbye\", \"oof\", \"yikes\"];\n  return (<Tab list={arr}/>);\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}